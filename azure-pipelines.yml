# Below pipeline YAML file is for deploying Kubernetes Cluster.
# This YAML file is from MSLEARN course Deploy applications with Azure DevOps, module: Automate multi-container Kubernetes deployments with Azure Pipelines
# Docs  Learn-->Browse-->Deploy applications with Azure DevOps-->Automate multi-container Kubernetes deployments with Azure Pipelines
# https://docs.microsoft.com/en-us/learn/modules/deploy-kubernetes/4-deploy-kubernetes


trigger:
- 'master'

variables:
  buildConfiguration: 'Release'
  leaderboardRepository: 'leaderboard'
  webRepository: 'web'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'secret'

stages:
- stage: 'Build'
  displayName: 'Build and push'
  jobs:  
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: Docker@2
      displayName: 'Build and push the image to container registry'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: $(webRepository)
        dockerfile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/Dockerfile'
        containerRegistry: 'Container Registry Connection'
        tags: |
          $(tag)

    - task: Docker@2
      displayName: 'Build and push the leaderboard image to container registry'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: $(leaderboardRepository)
        dockerfile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.LeaderboardContainer/Dockerfile'
        containerRegistry: 'Container Registry Connection'
        tags: |
          $(tag)

      # since deployment tasks happen in their own Deploy stage, it will run on a completely fresh environment, probably even on a different agent. 
      # We should be sure to publish anything this stage produces that the other stage will need. PublishBuildArtifacts@1 task is for publishing. It's so common that there's even a shorthand for it, 'publish'. Hence the publish step is needed below.
    - publish: '$(Build.SourcesDirectory)/manifests'
      artifact: manifests


- stage: 'Deploy'
  displayName: 'Deploy the containers'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'spike.default'
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
            # download the manifest artifacts published earlier using the DownloadBuildArtifacts@0 task. There is a shorthand for that task a.k.a. 'download:' as shown below.
            # the 'current' specifier to indicate that we want the artifact from the current run of the pipeline.

          - download: current
            artifact: manifests

            # The KubernetesManifest@0 task is designed to manage all of the mainstream deployment operations required for Kubernetes. It supports multiple action options that range from creating secrets to deploying images. In this case, the createSecret action will be used, along with the additional parameters defined below.
            # action indicates the feature to run. In this case, createSecret creates the shared secret.
            # secretName specifies the name of the secret to create.
            #  dockerRegistryEndpoint specifies the name of the Azure Container Services connection.
            #  kubernetesServiceConnection specifies the name of the Azure Kubernetes Services connection.
            #  namespace specifies the Kubernetes namespace this action applies to.
            # You can learn more about the flexibility of this task in the Kubernetes manifest task  documentation at https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/kubernetes-manifest
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: 'Container Registry Connection'
              kubernetesServiceConnection: 'Kubernetes Cluster Connection'
              namespace: 'default'

            # The final step is to trigger the deployment of our updates images to the Kubernetes cluster. Based on the documentation, it looks like we can use the same task, but with a different action and parameters.
            #  action indicates the feature to run. In this case, deploy does exactly what it sounds like.
            #  kubernetesServiceConnection specifies the name of the Azure Kubernetes Services connection.
            #  namespace specifies the Kubernetes namespace this action applies to.
            #  imagePullSecrets specifies the list of secrets needed to pull from the container registry.
            #  containers specifies the list of container images to deploy.  
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              kubernetesServiceConnection: 'Kubernetes Cluster Connection'
              namespace: 'default'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(RegistryName)/$(webRepository):$(tag)
                $(RegistryName)/$(leaderboardRepository):$(tag)
